# 1 "ECU_Layer/ecu_layer_init.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 288 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "C:/Program Files/Microchip/MPLABX/v6.15/packs/Microchip/PIC18Fxxxx_DFP/1.4.151/xc8\\pic\\include\\language_support.h" 1 3
# 2 "<built-in>" 2
# 1 "ECU_Layer/ecu_layer_init.c" 2
# 1 "ECU_Layer/ecu_layer_init.h" 1
# 12 "ECU_Layer/ecu_layer_init.h"
# 1 "ECU_Layer/7_Segment/ecu_seven_seg.h" 1
# 12 "ECU_Layer/7_Segment/ecu_seven_seg.h"
# 1 "ECU_Layer/7_Segment/ecu_seven_seg_cfg.h" 1
# 12 "ECU_Layer/7_Segment/ecu_seven_seg.h" 2

# 1 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/hal_gpio.h" 1
# 11 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/hal_gpio.h"
# 1 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../mcal_std_types.h" 1
# 12 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../mcal_std_types.h"
# 1 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../std_libraries.h" 1
# 11 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../std_libraries.h"
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdio.h" 1 3



# 1 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\musl_xc8.h" 1 3
# 5 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdio.h" 2 3





# 1 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\features.h" 1 3
# 11 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdio.h" 2 3
# 24 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdio.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 1 3





typedef void * va_list[1];




typedef void * __isoc_va_list[1];
# 122 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 3
typedef unsigned size_t;
# 137 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 3
typedef long ssize_t;
# 168 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 3
typedef __int24 int24_t;
# 204 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 3
typedef __uint24 uint24_t;
# 246 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 3
typedef long long off_t;
# 399 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 3
typedef struct _IO_FILE FILE;
# 25 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdio.h" 2 3
# 52 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdio.h" 3
typedef union _G_fpos64_t {
 char __opaque[16];
 double __align;
} fpos_t;

extern FILE *const stdin;
extern FILE *const stdout;
extern FILE *const stderr;





FILE *fopen(const char *restrict, const char *restrict);
FILE *freopen(const char *restrict, const char *restrict, FILE *restrict);
int fclose(FILE *);

int remove(const char *);
int rename(const char *, const char *);

int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
void clearerr(FILE *);

int fseek(FILE *, long, int);
long ftell(FILE *);
void rewind(FILE *);

int fgetpos(FILE *restrict, fpos_t *restrict);
int fsetpos(FILE *, const fpos_t *);

size_t fread(void *restrict, size_t, size_t, FILE *restrict);
size_t fwrite(const void *restrict, size_t, size_t, FILE *restrict);

int fgetc(FILE *);
int getc(FILE *);
int getchar(void);
int ungetc(int, FILE *);
int getch(void);

int fputc(int, FILE *);
int putc(int, FILE *);
int putchar(int);
void putch(char);

char *fgets(char *restrict, int, FILE *restrict);

char *gets(char *);


int fputs(const char *restrict, FILE *restrict);
int puts(const char *);

__attribute__((__format__(__printf__, 1, 2)))
int printf(const char *restrict, ...);
__attribute__((__format__(__printf__, 2, 3)))
int fprintf(FILE *restrict, const char *restrict, ...);
__attribute__((__format__(__printf__, 2, 3)))
int sprintf(char *restrict, const char *restrict, ...);
__attribute__((__format__(__printf__, 3, 4)))
int snprintf(char *restrict, size_t, const char *restrict, ...);

__attribute__((__format__(__printf__, 1, 0)))
int vprintf(const char *restrict, __isoc_va_list);
int vfprintf(FILE *restrict, const char *restrict, __isoc_va_list);
__attribute__((__format__(__printf__, 2, 0)))
int vsprintf(char *restrict, const char *restrict, __isoc_va_list);
__attribute__((__format__(__printf__, 3, 0)))
int vsnprintf(char *restrict, size_t, const char *restrict, __isoc_va_list);

__attribute__((__format__(__scanf__, 1, 2)))
int scanf(const char *restrict, ...);
__attribute__((__format__(__scanf__, 2, 3)))
int fscanf(FILE *restrict, const char *restrict, ...);
__attribute__((__format__(__scanf__, 2, 3)))
int sscanf(const char *restrict, const char *restrict, ...);

__attribute__((__format__(__scanf__, 1, 0)))
int vscanf(const char *restrict, __isoc_va_list);
int vfscanf(FILE *restrict, const char *restrict, __isoc_va_list);
__attribute__((__format__(__scanf__, 2, 0)))
int vsscanf(const char *restrict, const char *restrict, __isoc_va_list);

void perror(const char *);

int setvbuf(FILE *restrict, char *restrict, int, size_t);
void setbuf(FILE *restrict, char *restrict);

char *tmpnam(char *);
FILE *tmpfile(void);




FILE *fmemopen(void *restrict, size_t, const char *restrict);
FILE *open_memstream(char **, size_t *);
FILE *fdopen(int, const char *);
FILE *popen(const char *, const char *);
int pclose(FILE *);
int fileno(FILE *);
int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);
int dprintf(int, const char *restrict, ...);
int vdprintf(int, const char *restrict, __isoc_va_list);
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);
ssize_t getdelim(char **restrict, size_t *restrict, int, FILE *restrict);
ssize_t getline(char **restrict, size_t *restrict, FILE *restrict);
int renameat(int, const char *, int, const char *);
char *ctermid(char *);







char *tempnam(const char *, const char *);
# 11 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../std_libraries.h" 2

# 1 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdlib.h" 1 3
# 21 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdlib.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 1 3
# 18 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 3
typedef long int wchar_t;
# 22 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\stdlib.h" 2 3

int atoi (const char *);
long atol (const char *);
long long atoll (const char *);
double atof (const char *);

float strtof (const char *restrict, char **restrict);
double strtod (const char *restrict, char **restrict);
long double strtold (const char *restrict, char **restrict);



long strtol (const char *restrict, char **restrict, int);
unsigned long strtoul (const char *restrict, char **restrict, int);
long long strtoll (const char *restrict, char **restrict, int);
unsigned long long strtoull (const char *restrict, char **restrict, int);

int rand (void);
void srand (unsigned);

void *malloc (size_t);
void *calloc (size_t, size_t);
void *realloc (void *, size_t);
void free (void *);

          void abort (void);
int atexit (void (*) (void));
          void exit (int);
          void _Exit (int);

void *bsearch (const void *, const void *, size_t, size_t, int (*)(const void *, const void *));







__attribute__((nonreentrant)) void qsort (void *, size_t, size_t, int (*)(const void *, const void *));

int abs (int);
long labs (long);
long long llabs (long long);

typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;
typedef struct { long long quot, rem; } lldiv_t;

div_t div (int, int);
ldiv_t ldiv (long, long);
lldiv_t lldiv (long long, long long);

typedef struct { unsigned int quot, rem; } udiv_t;
typedef struct { unsigned long quot, rem; } uldiv_t;
udiv_t udiv (unsigned int, unsigned int);
uldiv_t uldiv (unsigned long, unsigned long);
# 12 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../std_libraries.h" 2

# 1 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\string.h" 1 3
# 25 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\string.h" 3
# 1 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 1 3
# 411 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\bits/alltypes.h" 3
typedef struct __locale_struct * locale_t;
# 26 "C:\\Program Files\\Microchip\\xc8\\v2.41\\pic\\include\\c99\\string.h" 2 3

void *memcpy (void *restrict, const void *restrict, size_t);
void *memmove (void *, const void *, size_t);
void *memset (void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void *memchr (const void *, int, size_t);

char *strcpy (char *restrict, const char *restrict);
char *strncpy (char *restrict, const char *restrict, size_t);

char *strcat (char *restrict, const char *restrict);
char *strncat (char *restrict, const char *restrict, size_t);

int strcmp (const char *, const char *);
int strncmp (const char *, const char *, size_t);

int strcoll (const char *, const char *);
size_t strxfrm (char *restrict, const char *restrict, size_t);

char *strchr (const char *, int);
char *strrchr (const char *, int);

size_t strcspn (const char *, const char *);
size_t strspn (const char *, const char *);
char *strpbrk (const char *, const char *);
char *strstr (const char *, const char *);
char *strtok (char *restrict, const char *restrict);

size_t strlen (const char *);

char *strerror (int);




char *strtok_r (char *restrict, const char *restrict, char **restrict);
int strerror_r (int, char *, size_t);
char *stpcpy(char *restrict, const char *restrict);
char *stpncpy(char *restrict, const char *restrict, size_t);
size_t strnlen (const char *, size_t);
char *strdup (const char *);
char *strndup (const char *, size_t);
char *strsignal(int);
char *strerror_l (int, locale_t);
int strcoll_l (const char *, const char *, locale_t);
size_t strxfrm_l (char *restrict, const char *restrict, size_t, locale_t);




void *memccpy (void *restrict, const void *restrict, int, size_t);
# 13 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../std_libraries.h" 2
# 12 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../mcal_std_types.h" 2



typedef unsigned char uint8;
typedef unsigned int uint16;
typedef unsigned long uint32;
typedef signed char sint8;
typedef signed int sint16;
typedef signed long sint32;

typedef uint8 Std_ReturnType;
# 11 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/hal_gpio.h" 2

# 1 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../device_config.h" 1
# 12 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/hal_gpio.h" 2

# 1 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../my_pic18f4620.h" 1
# 60 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/../my_pic18f4620.h"
typedef union {
  struct {
   uint8 GIE :1;
   uint8 PEIE :1;
   uint8 TMR0IE :1;
   uint8 INT0IE :1;
   uint8 RBIE :1;
   uint8 TMR0IF :1;
   uint8 INT0IF :1;
   uint8 RBIF :1;
};
  struct {
   uint8 GIEH :1;
   uint8 GIEL :1;
   uint8 reserved:6;
};
}INTCON_t;
# 13 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/hal_gpio.h" 2

# 1 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/hal_gpio_cfg.h" 1
# 14 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/hal_gpio.h" 2
# 31 "ECU_Layer/7_Segment/../../MCAL_Layer/GPIO/hal_gpio.h"
typedef enum{
    LOW=0,
    HIGH
}logic_t;

typedef enum{
    OUTPUT=0,
    INPUT
}direction_t;

typedef enum{
    PIN0=0,
    PIN1,
    PIN2,
    PIN3,
    PIN4,
    PIN5,
    PIN6,
    PIN7
}pin_index_t;

typedef enum{
    PORTA_INDEX=0,
    PORTB_INDEX,
    PORTC_INDEX,
    PORTD_INDEX,
    PORTE_INDEX
}port_index_t;

typedef struct{
    uint8 port:3;
    uint8 pin:3;
    uint8 direction:1;
    uint8 logic:1;
}pin_config_t;


Std_ReturnType gpio_pin_initialize(const pin_config_t *pin_config);
Std_ReturnType gpio_pin_direction_initialize(const pin_config_t *pin_config);
Std_ReturnType gpio_pin_get_direction_status(const pin_config_t *pin_config, direction_t* direction_status);
Std_ReturnType gpio_pin_write_logic(const pin_config_t *pin_config, logic_t logic);
Std_ReturnType gpio_pin_read_logic(const pin_config_t *pin_config, logic_t* logic);
Std_ReturnType gpio_pin_toggle_logic(const pin_config_t *pin_config);

Std_ReturnType gpio_port_direction_initialize(port_index_t port,uint8 direction);
Std_ReturnType gpio_port_get_direction_status(port_index_t port, uint8* direction_status);
Std_ReturnType gpio_port_write_logic(port_index_t port, uint8 logic);
Std_ReturnType gpio_port_read_logic(port_index_t port, uint8* logic);
Std_ReturnType gpio_port_toggle_logic(port_index_t port);
# 13 "ECU_Layer/7_Segment/ecu_seven_seg.h" 2
# 26 "ECU_Layer/7_Segment/ecu_seven_seg.h"
typedef enum{
    SEGMENT_COMMON_ANODE,
    SEGMENT_COMMON_CATHODE
}segment_type_t;

typedef struct{
    pin_config_t segment_pins[4];
    segment_type_t segment_type;
}segment_t;


Std_ReturnType seven_segment_initialize(const segment_t *seg);
Std_ReturnType seven_segment_write_number(const segment_t *seg , uint8 number);
# 12 "ECU_Layer/ecu_layer_init.h" 2

# 1 "ECU_Layer/DC_Motor/ecu_dc_motor.h" 1
# 12 "ECU_Layer/DC_Motor/ecu_dc_motor.h"
# 1 "ECU_Layer/DC_Motor/ecu_dc_motor_cfg.h" 1
# 12 "ECU_Layer/DC_Motor/ecu_dc_motor.h" 2
# 26 "ECU_Layer/DC_Motor/ecu_dc_motor.h"
typedef struct {
    pin_config_t dc_motor_pin[2];
}dc_motor_t;


Std_ReturnType dc_motor_initialize (const dc_motor_t *_dc_motor);
Std_ReturnType dc_motor_move_right (const dc_motor_t *_dc_motor);
Std_ReturnType dc_motor_move_left (const dc_motor_t *_dc_motor);
Std_ReturnType dc_motor_stop (const dc_motor_t *_dc_motor);
# 13 "ECU_Layer/ecu_layer_init.h" 2

# 1 "ECU_Layer/KeyPad/ecu_keypad.h" 1
# 12 "ECU_Layer/KeyPad/ecu_keypad.h"
# 1 "ECU_Layer/KeyPad/ecu_keypad_cfg.h" 1
# 12 "ECU_Layer/KeyPad/ecu_keypad.h" 2
# 23 "ECU_Layer/KeyPad/ecu_keypad.h"
typedef struct {
    pin_config_t keypad_row_pins[4];
    pin_config_t keypad_columns_pins[4];
}keypad_t;


Std_ReturnType keypad_initialize(const keypad_t * keypad_obj);
Std_ReturnType keypad_get_value(const keypad_t * keypad_obj , uint8 * value);
# 14 "ECU_Layer/ecu_layer_init.h" 2

# 1 "ECU_Layer/LED/ecu_led.h" 1
# 13 "ECU_Layer/LED/ecu_led.h"
# 1 "ECU_Layer/LED/ecu_led_cfg.h" 1
# 13 "ECU_Layer/LED/ecu_led.h" 2
# 22 "ECU_Layer/LED/ecu_led.h"
typedef enum{
  LED_OFF = 0,
  LED_ON
}led_status_t;

typedef struct{
uint8 port_name:4;
uint8 pin:3;
uint8 led_status:1;
}led_t;


Std_ReturnType led_initialize(const led_t *led);
Std_ReturnType led_turn_on(const led_t *led);
Std_ReturnType led_turn_off(const led_t *led);
Std_ReturnType led_toggle(const led_t *led);
# 15 "ECU_Layer/ecu_layer_init.h" 2

# 1 "ECU_Layer/Relay/ecu_relay.h" 1
# 12 "ECU_Layer/Relay/ecu_relay.h"
# 1 "ECU_Layer/Relay/ecu_relay_cfg.h" 1
# 12 "ECU_Layer/Relay/ecu_relay.h" 2
# 22 "ECU_Layer/Relay/ecu_relay.h"
typedef struct {
    uint8 relay_port:4;
    uint8 relay_pin:3;
    uint8 relay_status:1;
}relay_t;


Std_ReturnType relay_initialize(const relay_t *_relay);
Std_ReturnType relay_turn_on(const relay_t *_relay);
Std_ReturnType relay_turn_off(const relay_t *_relay);
# 16 "ECU_Layer/ecu_layer_init.h" 2

# 1 "ECU_Layer/button/ecu_button.h" 1
# 12 "ECU_Layer/button/ecu_button.h"
# 1 "ECU_Layer/button/ecu_button_cfg.h" 1
# 12 "ECU_Layer/button/ecu_button.h" 2
# 22 "ECU_Layer/button/ecu_button.h"
typedef enum{
    BUTTON_PRESSED =0,
    BUTTON_RELEASED
}button_state_t;

typedef enum{
    BUTTON_ACTIVE_HIGH,
    BUTTON_ACTIVE_LOW
}button_active_t;

typedef struct{
    pin_config_t button_pin;
    button_state_t button_state;
    button_active_t button_connection;
}button_t;


Std_ReturnType button_initialize(const button_t *btn);
Std_ReturnType button_read_state(const button_t *btn,button_state_t *btn_state);
# 17 "ECU_Layer/ecu_layer_init.h" 2

# 1 "ECU_Layer/Chr_LCD/ecu_chr_lcd.h" 1
# 12 "ECU_Layer/Chr_LCD/ecu_chr_lcd.h"
# 1 "ECU_Layer/Chr_LCD/ecu_chr_lcd_cfg.h" 1
# 12 "ECU_Layer/Chr_LCD/ecu_chr_lcd.h" 2
# 53 "ECU_Layer/Chr_LCD/ecu_chr_lcd.h"
typedef struct {
    pin_config_t lcd_rs;
    pin_config_t lcd_en;
    pin_config_t lcd_data[4];
}chr_lcd_4bit_t;

typedef struct {
    pin_config_t lcd_rs;
    pin_config_t lcd_en;
    pin_config_t lcd_data[8];
}chr_lcd_8bit_t;

Std_ReturnType lcd_4bit_initialize (const chr_lcd_4bit_t *lcd);
Std_ReturnType lcd_4bit_send_command (const chr_lcd_4bit_t *lcd, uint8 command);
Std_ReturnType lcd_4bit_send_char_data (const chr_lcd_4bit_t *lcd, uint8 data);
Std_ReturnType lcd_4bit_send_char_data_pos (const chr_lcd_4bit_t *lcd ,uint8 row ,uint8 column , uint8 data);
Std_ReturnType lcd_4bit_send_string (const chr_lcd_4bit_t *lcd, uint8 *str);
Std_ReturnType lcd_4bit_send_string_pos (const chr_lcd_4bit_t *lcd ,uint8 row ,uint8 column , uint8 *str);
Std_ReturnType lcd_4bit_send_custom_char(const chr_lcd_4bit_t *lcd ,uint8 row ,uint8 column ,
                                         const uint8 _chr[],uint8 mem_pos);


Std_ReturnType lcd_8bit_initialize (const chr_lcd_8bit_t *lcd);
Std_ReturnType lcd_8bit_send_command (const chr_lcd_8bit_t *lcd, uint8 command);
Std_ReturnType lcd_8bit_send_char_data (const chr_lcd_8bit_t *lcd, uint8 data);
Std_ReturnType lcd_8bit_send_char_data_pos (const chr_lcd_8bit_t *lcd ,uint8 row ,uint8 column , uint8 data);
Std_ReturnType lcd_8bit_send_string (const chr_lcd_8bit_t *lcd, uint8 *str);
Std_ReturnType lcd_8bit_send_string_pos (const chr_lcd_8bit_t *lcd ,uint8 row ,uint8 column , uint8 *str);
Std_ReturnType lcd_8bit_send_custom_char(const chr_lcd_8bit_t *lcd ,uint8 row ,uint8 column ,
                                         const uint8 _chr[],uint8 mem_pos);

Std_ReturnType convert_byte_to_string(uint8 value , uint8 *str);
Std_ReturnType convert_short_to_string(uint16 value , uint8 *str);
Std_ReturnType convert_long_to_string(uint32 value , uint8 *str);
# 18 "ECU_Layer/ecu_layer_init.h" 2
# 29 "ECU_Layer/ecu_layer_init.h"
void ecu_layer_initialize(void);
# 1 "ECU_Layer/ecu_layer_init.c" 2


chr_lcd_4bit_t lcd1 ={
  .lcd_rs.port=PORTC_INDEX,
  .lcd_rs.pin=PIN0,
  .lcd_rs.direction=OUTPUT,
  .lcd_rs.logic=LOW,
  .lcd_en.port=PORTC_INDEX,
  .lcd_en.pin=PIN1,
  .lcd_en.direction=OUTPUT,
  .lcd_en.logic=LOW,
  .lcd_data[0].port=PORTC_INDEX,
  .lcd_data[0].pin=PIN2,
  .lcd_data[0].direction=OUTPUT,
  .lcd_data[0].logic=LOW,
  .lcd_data[1].port=PORTC_INDEX,
  .lcd_data[1].pin=PIN3,
  .lcd_data[1].direction=OUTPUT,
  .lcd_data[1].logic=LOW,
  .lcd_data[2].port=PORTC_INDEX,
  .lcd_data[2].pin=PIN4,
  .lcd_data[2].direction=OUTPUT,
  .lcd_data[2].logic=LOW,
  .lcd_data[3].port=PORTC_INDEX,
  .lcd_data[3].pin=PIN5,
  .lcd_data[3].direction=OUTPUT,
  .lcd_data[3].logic=LOW
};
chr_lcd_8bit_t lcd_2 ={
  .lcd_rs.port=PORTC_INDEX,
  .lcd_rs.pin=PIN6,
  .lcd_rs.direction=OUTPUT,
  .lcd_rs.logic=LOW,
  .lcd_en.port=PORTC_INDEX,
  .lcd_en.pin=PIN7,
  .lcd_en.direction=OUTPUT,
  .lcd_en.logic=LOW,
  .lcd_data[0].port=PORTD_INDEX,
  .lcd_data[0].pin=PIN0,
  .lcd_data[0].direction=OUTPUT,
  .lcd_data[0].logic=LOW,
  .lcd_data[1].port=PORTD_INDEX,
  .lcd_data[1].pin=PIN1,
  .lcd_data[1].direction=OUTPUT,
  .lcd_data[1].logic=LOW,
  .lcd_data[2].port=PORTD_INDEX,
  .lcd_data[2].pin=PIN2,
  .lcd_data[2].direction=OUTPUT,
  .lcd_data[2].logic=LOW,
  .lcd_data[3].port=PORTD_INDEX,
  .lcd_data[3].pin=PIN3,
  .lcd_data[3].direction=OUTPUT,
  .lcd_data[3].logic=LOW,
  .lcd_data[4].port=PORTD_INDEX,
  .lcd_data[4].pin=PIN4,
  .lcd_data[4].direction=OUTPUT,
  .lcd_data[4].logic=LOW,
  .lcd_data[5].port=PORTD_INDEX,
  .lcd_data[5].pin=PIN5,
  .lcd_data[5].direction=OUTPUT,
  .lcd_data[5].logic=LOW,
  .lcd_data[6].port=PORTD_INDEX,
  .lcd_data[6].pin=PIN6,
  .lcd_data[6].direction=OUTPUT,
  .lcd_data[6].logic=LOW,
  .lcd_data[7].port=PORTD_INDEX,
  .lcd_data[7].pin=PIN7,
  .lcd_data[7].direction=OUTPUT,
  .lcd_data[7].logic=LOW
};
keypad_t keypad1={
    .keypad_row_pins[0].pin=PIN0,
    .keypad_row_pins[0].port=PORTC_INDEX,
    .keypad_row_pins[0].direction=OUTPUT,
    .keypad_row_pins[0].logic=LOW,
    .keypad_row_pins[1].pin=PIN1,
    .keypad_row_pins[1].port=PORTC_INDEX,
    .keypad_row_pins[1].direction=OUTPUT,
    .keypad_row_pins[1].logic=LOW,
    .keypad_row_pins[2].pin=PIN2,
    .keypad_row_pins[2].port=PORTC_INDEX,
    .keypad_row_pins[2].direction=OUTPUT,
    .keypad_row_pins[2].logic=LOW,
    .keypad_row_pins[3].pin=PIN3,
    .keypad_row_pins[3].port=PORTC_INDEX,
    .keypad_row_pins[3].direction=OUTPUT,
    .keypad_row_pins[3].logic=LOW,
    .keypad_columns_pins[0].pin=PIN4,
    .keypad_columns_pins[0].port=PORTC_INDEX,
    .keypad_columns_pins[0].direction=INPUT,
    .keypad_columns_pins[0].logic=LOW,
    .keypad_columns_pins[1].pin=PIN5,
    .keypad_columns_pins[1].port=PORTC_INDEX,
    .keypad_columns_pins[1].direction=INPUT,
    .keypad_columns_pins[1].logic=LOW,
    .keypad_columns_pins[2].pin=PIN6,
    .keypad_columns_pins[2].port=PORTC_INDEX,
    .keypad_columns_pins[2].direction=INPUT,
    .keypad_columns_pins[2].logic=LOW,
    .keypad_columns_pins[3].pin=PIN7,
    .keypad_columns_pins[3].port=PORTC_INDEX,
    .keypad_columns_pins[3].direction=INPUT,
    .keypad_columns_pins[3].logic=LOW
};

led_t led1 = {
    .port_name=PORTD_INDEX,
    .pin=PIN0,
    .led_status=LOW
};
void ecu_layer_initialize(void){
     Std_ReturnType ret=(Std_ReturnType)0x00;
    ret=lcd_4bit_initialize(&lcd1);
    ret=lcd_8bit_initialize(&lcd_2);
}
